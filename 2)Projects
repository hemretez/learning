Projects


P0: b,d,f,h) Using GIT & Developing a new instrument on Bela: C++, Bela, Synth, Network things

First task to borrow two Bela's or D-boxes
Find your old notes while you took during the building process of your networked D-box study


P0_2 a) Using GIT : Through Giulio's Challenges


// GM: Why are these repated here? Can you use `diff` and `patch` to apply here those same changes that I applied to 1) ?
// HET: I wanted to have a copy of the list at the top of the 2) for practical reasons, i.e. quick glance.
// GM: it is bad to have duplicated content, in git and in life.
// HET: Agreed

// Then new challenge: generate a new file 1+2) so that:
// a) the file content is the content of 1) followed by the content of 2) (you can use, e.g.: `cat`)
// b) this file is untracked by git (use `.gitignore` for this), to avoid mistakenly committing it.
// c) BONUS1: use git hooks to re-generate that file after every pull. This would be useful in many cases, but perhaps not in this one.
// d) BONUS2: write a bash script that checks for modifications in 1) and 2) and generates 1+2) every time one of the two changes. You can get inspiration from https://github.com/BelaPlatform/Bela/blob/master/scripts/.bela_common and https://github.com/BelaPlatform/Bela/blob/master/scripts/build_project.sh

// How do you use `diff` and `patch` ? The nerd answer is `man diff` and `man patch`. In practice you can probably
// google for them and you will still learn something useful.

// HET: for example - to be checked
/*
cd Documents/learning/
git log
// now I have the latest commit hash from you: f55889d3faa0274dbf10836cd67568d6312db323
git pull
// now I have latest changes you made, right?

    //GM well you actually need to do `git pull` before you get the latest commit hash from you. In practice, in your case,
	// git Desktop will have probably done that already (the famouse `sync` button)

cp 2)Projects 2)Projects.new
// make changes on .new
diff -u 2)Projects 2)Projects.new > 2)Projects.patch
// now we have a patch file: 2)Projects.patch
patch 2)Projects < 2)Projects.patch
// applied the changes to the original file

	//GM right this probably works, but this way you are applying the changes from `2)Projects.new` to `2)Projects`, which is perfectly fine but it is not what I asked.
	// I asked to apply to `2)` those same changes that I applied to `1)`! You can do something like
	git diff bbe89df..e10df94
	// to get the patch file, then I guess you can mess around with `patch`'s option to apply it to `2)`
	// Challenge response rejected, try again!

git add 2)Projects.new // I'm not sure about this line

	//GM the above line is the equivalent of ticking boxes in git Desktop.

git commit -m "reply to GM's challenge" 2)Projects
git tag -d 05.06.17
// committed and tagged

	//GM it seems that you are abusing tags ... they shold be used for something like releases, or "stable" versions, not just one for every commit

//if I realized I have something wrong, before committing I can:
git checkout -- <2)Projects>

// if I already committed, then I need to
git checkout f55889d3faa0274dbf10836cd67568d6312db323
*/


P1: a) Using GIT : learning git using collidoscope
Now this project is on hold!
Project a1)
So, I thought about some projects that I thought would be useful to learn the things in 1)

- To begin with, I want to make write my own version of Collidoscope and do a study. This will be working on C++ and GIT. I am just assuming that Fiore is very good at C++, just because he wrote that code, but I am not sure if that is a good example of a contempprary, high level C++ code. Nevertheless, a professor of software engineering once told me that the best to learn a programming language is to find a good code and change it for your needs, so I am planning to do that. What do you think?

And while doing this, I will use GIT as you suggested. Do you use git desktop, or do you do everything from terminal?







P2: b) c++ : Collidoscope development for my PhD

Under construction…
First task is to learn all the symbols and what they do in C++, such as >>





P3: b,d,f,h) c++,PD,Bela,Synth :  Intellijel Metropolis On PD & Bela



P4: b,d) c++, Dsp : Make one VST you’d use, with juce




P5: b,d,h) c++,Dsp : Physical Modelling Synth and Waveguides
Learn what they are
Theory, applications
Try to implement them on Bela to make a NIME

Possible projects:
Trombone
Percussion instrument
Veg/ fruit cutting
P6: d) Dsp : Karplus Strong

Learn what they are
Theory, applications
Try to implement them on Bela to make a NIME

Possible projects:
Veg/ fruit cutting
Trombone
Percussion instrument
P7: c) Python


P8: m) Sound Design
Tau cannon:
Bela , Pd, motors, lights, FSR
Synthesize the Tau Cannon sound if you can, if not just use the wavs
Physically build it


P9: i) machine learning/generative music/music analysis
Youtube videos dload – 1000
Auto music analysis
Audio mashup + https://www.youtube.com/watch?v=YvT_6RIaPJ8 on the top
Video cut & play accordingly

In process…

P10: f) PD/Max
Think of a project when you find the right time & place & motivation.
https://www.automatonism.com/the-software/

https://github.com/trending/max

https://books.google.co.uk/books?id=f5NHDAAAQBAJ&pg=PA172&lpg=PA172&dq=max+msp+libraries+abstractions&source=bl&ots=80lra7QjjU&sig=XH-iSfE9YO6NxOd8LA3iSFcKLH8&hl=en&sa=X&ved=0ahUKEwjE4d3VgYnUAhXHtRoKHYvZBr4Q6AEISDAG#v=onepage&q=max%20msp%20libraries%20abstractions&f=false
http://www.essl.at/works/rtc.html
http://stefanofasciani.com/?p=865
https://cycling74.com/tools/hoalibrary-v2
